# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
export GPG_TTY=$(tty)

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}â–“â–’â–‘ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}â–“â–’â–‘ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}â–“â–’â–‘ The clone has failed.%f%b"
fi
source "$HOME/.zinit/bin/zinit.zsh"
# autoload -Uz _zinit
# (( ${+_comps} )) && _comps[zinit]=_zinit

### End of Zinit's installer chunk

# OMZ provide lib for many plugins, So load first
zinit wait lucid for \
    OMZL::compfix.zsh \
    OMZL::completion.zsh \
    OMZL::functions.zsh \
    OMZL::git.zsh \
    OMZL::history.zsh \
    OMZL::key-bindings.zsh \
    OMZL::theme-and-appearance.zsh \
    OMZL::prompt_info_functions.zsh \
# Install OMZ plugin
zinit wait lucid for \
    OMZP::git \
    OMZP::autojump \
    OMZP::web-search \
    OMZP::encode64 \
    OMZP::tmux \
    OMZP::extract \
    OMZP::zsh_reload \
	OMZP::kubectl \
    OMZP::fzf \
    OMZP::colored-man-pages \
# Install OMZ autocompletion
zinit as"completion" wait lucid for \
    OMZ::plugins/extract/_extract \
    OMZ::plugins/ripgrep/_ripgrep \
    # OMZ::plugins/docker/_docker \
    # plugins/_hostctl
    # hostctl
# Install third party plugin
zinit has"fzf" wait lucid for \
    multisrc"shell/{key-bindings,completion}.zsh" pick"" \
    junegunn/fzf
zinit wait lucid for \
    zpm-zsh/ssh \
    paulirish/git-open \
    wfxr/forgit \
    mfaerevaag/wd \
	Tarrasch/zsh-bd \
    zinit-zsh/z-a-bin-gem-node\
    psprint/zsh-navigation-tools \
    atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
        zdharma/fast-syntax-highlighting \
    blockf \
        zsh-users/zsh-completions \
    atload"!_zsh_autosuggest_start" \
        zsh-users/zsh-autosuggestions
### End of Zinit's plugin install chunk

zinit as"program" wait"1" if"[[ $OSTYPE == linux* ]]" lucid from"gh-r" for \
    mv"exa* -> exa"    ogham/exa \
    mv"*/rg -> rg"     BurntSushi/ripgrep \
    mv"diff-so-fancy -> diff-so-fancy" so-fancy/diff-so-fancy \
    mv"*/bin/hub -> hub"    @github/hub \
    mv"*/hyperfine -> hyperfine"     @sharkdp/hyperfine \
    mv"*/bat -> bat"    @sharkdp/bat \

#https://zdharma.org/zinit/wiki/id-as/
# zinit ice as"program" from"gh-r" mv"docker-c* -> docker-compose"
# zinit light "docker/compose"
# zinit ice as"completion" id-as"dc-complete"
# zinit load docker/compose

# setopt promptsubst  # OMZ theme must use this
# PS1="READY > "
# zinit ice wait'!0'
# zinit snippet OMZT::af-magic  #OMZT::pmcgee
zinit ice depth'1' lucid atinit'[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh'
zinit light romkatv/powerlevel10k

#autoload -Uz compinit; compinit; zinit cdreplay -q

# Customize to your needs...
# ZSH config
HISTSIZE=10000000
SAVEHIST=10000000
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_FIND_NO_DUPS
setopt HIST_EXPIRE_DUPS_FIRST
setopt EXTENDED_HISTORY
# https://stackoverflow.com/questions/11670935/comments-in-command-line-zsh/11873793#11873793
setopt interactivecomments
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=3,bold,underline'
ZSH_AUTOSUGGEST_USE_ASYNC=1
DISABLE_AUTO_TITLE="true"
### End of zsh config chunk

# fzf config
export FZF_BASE=/usr/local/bin/fzf
export FZF_DEFAULT_OPTS='
        --height 90% --multi --layout=reverse --border
        --bind ctrl-f:page-down,ctrl-b:page-up
        --preview-window "right:60%:wrap"
        '
        # --preview "head -100 {}"

#forgit config
export FORGIT_LOG_GRAPH_ENABLE=false

# custom function
function jim/jdk() {
        version=$1
        export JAVA_HOME=$(/usr/libexec/java_home -v"$version");
        java -version
 }

function jim/awsp() {
    export AWS_PROFILE="$(jim/aws-profiles | fzf)"
}

function jim/aws-profiles() {
    cat ~/.aws/credentials | grep '\[' | grep -v '#' | tr -d '[' | tr -d ']'
}

# system env
export PATH="/opt/homebrew/bin:$HOME/.tgenv/bin:$HOME/.tfenv/bin:$PATH"
export LC_ALL="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export DISABLE_MAGIC_FUNCTIONS=true
export BAT_CONFIG_PATH="$HOME/.bat.conf"
# export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export EDITOR="vim"

alias zshconfig="vim ~/.zshrc"
alias sshconfig="vim ~/.ssh/config"
alias his="history -i"
alias vimpluginstall="vim +PlugInstall! +qa!"
alias vimplugupdate="vim +PlugUpdate! +qa!"
alias vimplugclean="vim +PlugClean! +qa!"
alias vimplugupgrade="vim +PlugUpgrade! +qa!"
alias wget="wget -c "
alias axel="axel -a -n 5 "
alias lock="m lock"
alias gop="git remote prune origin"
alias tf="terraform"
alias rgf="rg --no-heading --files | rg"
alias cat="bat"
alias cp="rsync -aP"
alias rm="rm -i"
alias weather='curl v2.wttr.in'
alias kubectl="kubecolor"
hub version > /dev/null 2>&1 && eval "$(hub alias -s)"
if [[ $OSTYPE == "darwin*" ]]; then
    alias sed="gsed"
fi

source $HOME/github/macdotfiles/mac_config/misc.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# custom p10k
# POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION="ðŸ¤º"
POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION=$'\U1F93A'

_tru_fzf-snippet() {
	snippets_dir=~/workspace/snippet
    # merge filename and tags into single line
    results=$(for FILE in $snippets_dir/*
              do
                  getname=$(basename $FILE)
                  gettags=$(head -n 1 $FILE)
                  echo "$getname \t $gettags"
              done)

    # filename=$(echo "$(echo $results | fzf -e -i )" | cut -d' ' -f 1)
    filename=$(echo "$(echo $results | fzf -i )" | cut -d' ' -f 1)
    # don't record command into history
    # print -z " $(cat $snippets_dir/$filename | sed 1d)"
    BUFFER=" $(cat $snippets_dir/$filename | sed 1d)"
    CURSOR=0
}

zle -N _tru_fzf-snippet
bindkey "^X'" _tru_fzf-snippet

_jump_to_tabstop_in_snippet() {
    # the idea is to match ${\w+}, and replace
    # that with the empty string, and move the cursor to
    # beginning of the match. If no match found, simply return
    # valid place holders: ${}, ${somealphanumericstr}
    local str=$BUFFER
    local searchstr=''
    [[ $str =~ ([$]\\{[[:alnum:]]*\\}) ]] && searchstr=$MATCH
    [[ -z "$searchstr" ]] && return

    local rest=${str#*$searchstr}
    local pos=$(( ${#str} - ${#rest} - ${#searchstr} ))
    BUFFER=$(echo ${str//${MATCH}/})
    CURSOR=$pos
}
zle -N _jump_to_tabstop_in_snippet
bindkey '^J' _jump_to_tabstop_in_snippet
